import csv
import numpy as np
import pandas as pd
import numpy as np
import sys

class generative:
    def __init__(self, w = None, no_train = False):
        if not no_train:
            self.train_X = pd.read_csv('X_train', index_col = 'id').to_numpy(dtype = np.float)
            self.train_Y = pd.read_csv('Y_train', index_col = 'id').to_numpy(dtype = np.float).reshape(-1)
            self.normalize()
            self.get_model()
        else:
            self.w = [-5.18672909e-01, 1.29144287e+00, 2.24578857e-01, 5.81817627e-01
                        ,5.92254639e-01, -2.66143799e-01, 8.83674622e-02, 3.26538086e-01
                        ,-6.64062500e-02, 7.10357666e-01, 1.38944387e-03, -1.86298370e-01
                        ,4.54711914e-02, -2.43312836e-01, -9.19971466e-02, -9.63830948e-02
                        ,-9.00316238e-02, -3.96232605e-02, -1.58593750e+00, -3.72070312e+00
                        ,1.17578125e+00, -6.73828125e-02, 2.55859375e+00, -9.52911377e-03
                        ,-4.99169922e+00, -5.38110352e+00, 4.21386719e-01, -2.92663574e-01
                        ,8.93402100e-02, 8.60443115e-02, -4.38232422e-02, -2.94219971e-01
                        ,-1.81054688e+00, -4.86633301e-01, -3.71322632e-01, -1.87547684e-01
                        ,-2.32646942e-01, -1.83670044e-01, -1.47487640e-01, 4.93469238e-02
                        ,-2.94570923e-01, 1.30386353e-02, 1.02929688e+00, -2.32128906e+00
                        ,-2.69140625e+00, 4.38476562e-01, -9.99145508e-02, 2.50000000e+00
                        ,-1.89453125e-01, 1.29302979e+00, -3.75000000e+00, 1.79296875e+00
                        ,8.56018066e-01, -2.27003098e-02, -4.77600098e-02, 1.36914062e+00
                        ,-3.08094025e-02, -1.27315521e-01, -1.06035233e-01, 8.30078125e-01
                        ,-6.06250000e+00, -2.49900818e-01, 2.64205933e-01, -8.22296143e-02
                        ,2.36953735e-01, 2.28942871e-01, 2.21008301e+00, 2.12609863e+00
                        ,-5.33889771e-01, -4.54086304e-01, -2.27798462e-01, -3.46778870e-01
                        ,-1.82170868e-01, -1.24572754e-01, -8.38348389e-01, 4.13177490e-01
                        ,-4.60632324e-01, -4.03991699e-01, 2.41271973e+00, 5.97839355e-02
                        ,-3.79932404e-01, -4.38598633e-01, -2.85552979e-01, -1.07025146e-01
                        ,-2.09289551e-01, 2.95117188e+00, -3.71887207e-01, -2.15087891e-01
                        ,-5.09271622e-02, -2.72705078e-01, -1.15890503e-01, -3.69079590e-01
                        ,-1.71066284e-01, -3.08959961e-01, -2.88169861e-01, -4.54101562e-01
                        ,-2.61810303e-01, -6.13372803e-01, -1.51007080e+00, -6.66046143e-01
                        ,-1.88671875e+00, -2.82928467e-01, 2.90145874e-02, -1.27349854e-01
                        ,-1.37252808e-01, -5.12390137e-02, 1.57775879e-02, -1.91268921e-01
                        ,6.19531250e+00, 6.71501160e-02, 4.10766602e-02, 4.95033264e-02
                        ,2.94342041e-02, -5.58227539e-01, 1.40525818e-01, 1.01974487e-01
                        ,-3.92951965e-01, -3.93276215e-01, -3.58200073e-03, 1.03725433e-01
                        ,-4.24545288e-01, 4.36401367e-02, 1.91986084e-01, -2.54997253e-01
                        ,1.24446869e-01, 1.02497101e-01, 1.46636876e-02, 6.25762939e-01
                        ,4.14321899e-01, 3.55133057e-01, -5.58883667e-01, -1.07028198e+00
                        ,-8.10760498e-01, -3.91082764e-01, -1.48822021e+00, -1.82647705e-01
                        ,-1.56176758e+00, 3.55664062e+00, -9.29687500e-01, 1.95507812e+00
                        ,3.69042969e+00, 7.09082031e+00, -1.36718750e+00, -4.07714844e-01
                        ,7.13928223e-01, -2.46093750e+00, -1.27734375e+00, -8.20312500e-02
                        ,-2.11621094e+00, -7.96875000e-01, 2.33593750e+00, -4.74609375e-01
                        ,1.50000000e+00, -1.58361816e+00, 7.81250000e-02, -3.09932709e-01
                        ,-2.49218750e+00, 1.61865234e-01, 2.80859375e+00, -7.97271729e-02
                        ,5.23925781e-01, -8.40637207e-01, -4.67871094e+00, 2.08450317e-01
                        ,-3.30859375e+00, -2.16821289e+00, -2.17773438e-01, -1.75231934e-01
                        ,-8.98132324e-01, 8.27148438e-01, -1.18804932e+00, -2.60009766e-01
                        ,-5.65460205e-01, -7.12539673e-01, -4.21875000e-01, -6.23474121e-01
                        ,-2.56881714e-01, -6.63391113e-01, -3.34335327e-01, -1.64344788e-01
                        ,-4.54315186e-01, 4.33769226e-02, 3.21350098e-02, 9.50546265e-02
                        ,1.41906738e-01, 3.46527100e-02, 4.34799194e-02, 1.59866333e-01
                        ,8.92105103e-02, 9.77249146e-02, 2.02789307e-01, 2.68359375e+00
                        ,3.14648438e+00, 3.83766174e-01, 1.11446381e-01, 3.73329163e-01
                        ,6.41098022e-02, 8.45260620e-02, 3.99856567e-02, 1.11351013e-01
                        ,-5.85937500e-02, 3.32717896e-02, -5.45864105e-02, -4.34936523e-01
                        ,-3.44406128e-01, -5.57907104e-01, -9.30137634e-02, -1.85333252e-01
                        ,-6.57730103e-02, -1.30496979e-01, -4.26087269e-01, -3.42196672e-01
                        ,-4.19946656e-01, 4.98626709e-01, 1.91989899e-01, 2.60726929e-01
                        ,7.79174805e-01, 3.25897217e-01, 3.81828308e-01, 1.30577087e-01
                        ,2.45342255e-01, 1.14453125e+00, -1.83174133e-01, -6.19140625e-01
                        ,1.49810791e-01, -9.52491760e-02, -6.30531311e-02, 1.42288208e-02
                        ,-6.16836548e-02, -7.15942383e-02, 1.11503601e-02, -1.17988586e-01
                        ,-9.92584229e-02, -1.72096252e-01, -1.77307129e-01, -1.07494354e-01
                        ,-9.69429016e-02, -7.92083740e-02, -7.96394348e-02, -2.01339722e-01
                        ,-1.59461975e-01, -8.28742981e-02, -1.72782898e-01, -8.77723694e-02
                        ,1.93328857e-02, 1.90658569e-02, -8.37936401e-02, -1.59210205e-01
                        ,-8.27293396e-02, -6.38160706e-02, -6.32133484e-02, 4.73785400e-03
                        ,-1.14765167e-01, -6.88667297e-02, -2.44140625e-04, -1.94433594e+00
                        ,-1.07704163e-01, -1.13895416e-01, 1.70898438e-03, 1.63116455e-02
                        ,-8.76464844e-02, -1.61125183e-01, -8.98056030e-02, -5.84526062e-02
                        ,-1.08222961e-01, 1.97296143e-02, -4.96788025e-02, -3.47137451e-03
                        ,-8.04023743e-02, 1.50299072e-03, -5.32665253e-02, -7.74192810e-02
                        ,1.29699707e-02, -4.88357544e-02, -6.78863525e-02, -3.22097778e-01
                        ,1.42646790e-01, 5.07705688e-01, 1.81194305e-01, 2.99444199e-02
                        ,-2.53543854e-01, -2.68268585e-01, 2.09212303e-02, 5.60203552e-01
                        ,6.91533089e-03, 1.65517330e-02, 1.41992188e+00, 3.49021912e-01
                        ,2.04147339e-01, 1.67754173e-01, 1.19376183e-03, 3.17940712e-02
                        ,1.86571121e-01, 2.12292671e-02, 1.21055603e+00, 1.30416870e-01
                        ,-1.05197906e-01, -9.38140869e-01, 1.82172775e-01, 1.41376257e-02
                        ,5.44517517e-01, 5.28125763e-02, 6.19140625e-01, 2.04898834e-01
                        ,8.35227966e-03, -2.74276733e-01, 2.69327164e-02, 5.59163094e-03
                        ,8.56981277e-02, 1.71661377e-01, -2.62165070e-03, 2.77664185e-01
                        ,9.36676025e-01, 3.86834145e-03, 1.43728256e-02, 1.38549805e-01
                        ,4.07592773e-01, 1.62274170e+00, -1.67861938e-01, -1.57089233e-02
                        ,-4.20776367e-01, -1.75292969e-01, 4.66957092e-02, -1.16601562e+00
                        ,7.16094971e-01, 6.06536865e-02, 2.32513428e-01, -1.65185547e+00
                        ,1.76467896e-01, 3.83178711e-01, 1.61727905e-01, 3.44531250e+00
                        ,7.59830475e-02, -1.42773438e+00, 1.93359375e+00, 1.09893799e-01
                        ,1.14208221e-01, -2.66943359e+00, 1.11718750e+00, 4.72656250e-01
                        ,1.30859375e-01, 1.09100342e-02, 1.78320312e+00, -6.54296875e-01
                        ,5.52902222e-02, 3.86199951e-02, 3.12304688e+00, -8.90625000e-01
                        ,1.16271973e-02, 3.15429688e-01, -1.04492188e+00, -7.95860291e-02
                        ,8.98437500e-01, -1.55175781e+00, 1.62315369e-01, -1.99609375e+00
                        ,-4.59625244e-01, -3.61404419e-01, -3.73459939e-01, -6.05453491e-01
                        ,-5.27877808e-01, -2.48703003e-01, -7.35000610e-01, -2.32887268e-01
                        ,-2.59857178e-02, -4.09011841e-02, -1.33808136e-01, -1.16062164e-02
                        ,-1.86271667e-02, -3.36656570e-02, -2.02631950e-02, -2.85079956e-01
                        ,-5.13210297e-02, -5.17416000e-02, -3.05690765e-02, -5.42945862e-02
                        ,-2.19039917e-02, -6.36901855e-02, -6.07528687e-02, -4.63943481e-02
                        ,-6.93435669e-02, -2.97498703e-02, -1.62798166e-02, -3.22394371e-02
                        ,-2.80942917e-02, -1.11541748e-01, -7.29427338e-02, -4.15019989e-02
                        ,-6.84146881e-02, 2.78911591e-02, -3.65896225e-02, -1.01158142e-01
                        ,-2.69641876e-02, -3.92045975e-02, -1.57386780e-01, -3.02362442e-02
                        ,-9.05227661e-02, -8.47930908e-02, -6.48665428e-03, 4.52232361e-03
                        ,-4.66156006e-03, -8.58688354e-03, -1.52988434e-02, -5.18941879e-02
                        ,-2.90002823e-02, -2.44846344e-02, -6.33659363e-02, -2.55462646e-01
                        ,-3.75595093e-01, -4.86572266e-01, -3.52478027e-01, -2.33749390e-01
                        ,-1.18759155e-01, -9.47761536e-02, -1.87451172e+00, -3.38027954e-01
                        ,-9.71755981e-02, -1.90032959e-01, -4.29107666e-01, -3.05419922e-01
                        ,-1.23626709e-01, -2.12966919e-01, -3.51165771e-01, -4.11331177e-01
                        ,-3.42224121e-01, -1.04850769e-01, -1.31736755e-01, -2.69607544e-01
                        ,-1.32385254e-01, -9.78820801e-01, -1.91436768e-01, -3.63891602e-01
                        ,-2.09640503e-01, -3.47396851e-01, -1.53839111e-01, -1.53114319e-01
                        ,-2.81936646e-01, -1.49291992e-01, -8.57299805e-01, -1.83776855e-01
                        ,-4.08996582e-01, -4.39147949e-01, -4.48875427e-02, -2.14401245e-01
                        ,-1.85638428e-01, -1.52610779e-01, -2.14187622e-01, -1.15303040e-01
                        ,-2.05307007e-01, -2.90817261e-01, 2.51129150e-01, 3.20007324e-01
                        ,-7.25158691e-01, 2.31483459e-01, 1.75701141e-01, -1.96624756e-01
                        ,4.01010513e-02, 8.56536865e-01, 2.89306641e-01, 1.15123749e-01
                        ,1.30970001e-01, 2.98843384e-01, 2.56156921e-01, 1.30596161e-01
                        ,9.89570618e-02, 2.49877930e-01, 2.06928253e-01, 2.72941589e-01
                        ,8.58955383e-02, 1.68479919e-01, 2.37525940e-01, 1.20464325e-01
                        ,6.76391602e-01, 1.41399384e-01, 1.98348999e-01, 1.80831909e-01
                        ,2.43164062e-01, 9.47418213e-02, 1.58386230e-01, 1.89731598e-01
                        ,2.06825256e-01, 6.09832764e-01, 9.97467041e-02, 2.68234253e-01
                        ,1.75567627e-01, 4.13265228e-02, 4.83226776e-02, 1.40419006e-01
                        ,1.04526520e-01, 1.57978058e-01, 9.60960388e-02, 1.82960510e-01
                        ,1.11351013e-01, 1.02136230e+00, -1.46133423e-01, -2.72529602e-01
                        ,2.38952637e-02, -3.90861511e-01, 5.29174805e-02, 1.35803223e-02
                        ,-1.46049500e-01, 1.58203125e+00, -1.10450745e-01, -3.30261230e-01
                        ,-9.67453003e-01, -6.91131592e-01, 1.40869141e+00, -4.47109237e-01
                        ,-1.60156250e-01, -8.43750000e-01]
            self.b = 2.6251791517776004
    
    def normalize(self, is_train = True):
        X = self.train_X if is_train else self.test_X
        col = np.arange(X.shape[1])
        X_mean = np.mean(X[..., col], 0).reshape(1, -1)
        X_std = np.std(X[..., col], 0).reshape(1, -1)
        X = (X[..., col] - X_mean) / (X_std + 1e-8)
        if is_train: self.train_X = X
        else: self.test_X = X
    
    def sigmoid(self, z):
        return np.clip(1. / (1.0 + np.exp(-z)), 1e-8, 1 - (1e-8))

    def get_result(self, test_file, result_file):
        output = [['id', 'label']]
        self.test_X = pd.read_csv(test_file, index_col = 'id').to_numpy(dtype = np.float)
        self.normalize(is_train = False)
        result = 1 - np.round(self.sigmoid(np.matmul(self.test_X, self.w) + self.b)).astype(np.int)
        for i in range(len(result)): 
            output.append([i, result[i]])
        csv.writer(open(result_file, 'w')).writerows(output)

    def get_model(self):
        train_zero = np.array([x for x, y in zip(self.train_X, self.train_Y) if y == 0])
        train_one = np.array([x for x, y in zip(self.train_X, self.train_Y) if y == 1])
        mean_zero = np.mean(train_zero, axis = 0)
        mean_one = np.mean(train_one, axis = 0)
        cov_zero = np.zeros((train_zero.shape[1], train_zero.shape[1]))
        cov_one = np.zeros((train_one.shape[1], train_one.shape[1]))

        for x in train_zero:
            cov_zero += np.dot(np.transpose([x - mean_zero]), [x - mean_zero]) / train_zero.shape[0]
        for x in train_one:
            cov_one += np.dot(np.transpose([x - mean_one]), [x - mean_one]) / train_one.shape[0]

        cov = (cov_zero * train_zero.shape[0] + cov_one * train_one.shape[0]) / float(self.train_X.shape[0])
        u, s, v = np.linalg.svd(cov, full_matrices = False)
        inv = np.matmul(v.T * 1 / s, u.T)
        self.w = np.dot(inv, mean_zero - mean_one)
        self.b = -0.5 * np.dot(mean_zero, np.dot(inv, mean_zero)) + 0.5 * np.dot(mean_one, np.dot(inv, mean_one)) + np.log(float(train_zero.shape[0]) / train_one.shape[0])

    
model = generative(no_train = True)
model.get_result(sys.argv[1], sys.argv[2])
